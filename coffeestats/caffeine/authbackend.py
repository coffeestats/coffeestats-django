"""
Custom authentication backend for coffeestats.

"""
from passlib.hash import bcrypt
import logging

from django.utils import timezone

from django.contrib.auth.hashers import make_password

from .models import User


logger = logging.getLogger(__name__)


class LegacyCoffeestatsAuth(object):
    """
    Authentication backend for passwords generated by the original coffeestats
    PHP implementation.

    """

    def authenticate(self, username=None, password=None):
        try:
            user = User.objects.get(username=username)
        except User.DoesNotExist:
            return None
        if not user.password:
            logger.info(
                'trying to authenticate %s with no password and cryptsum=%s',
                user.username, user.cryptsum)
            if self._check_password(user.cryptsum, password):
                user.password = make_password(password)
                user.cryptsum = ''
                user.last_login = timezone.now()
                user.save()
                return user
        return None

    def _check_password(self, passwordhash, password):
        return bcrypt.verify(password, passwordhash)

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None
